---

- name: Get ip
  ansible.builtin.uri:
    url: 'https://ifconfig.me/ip'
    method: GET
    return_content: true
  register: getIP
  when: ansible_hostname == 'controlplane'

- name: Checking file config containerd exist
  stat: path=/etc/containerd/config.toml
  register: containerd_config

- name: Move config.toml
  command: mv /etc/containerd/config.toml /etc/containerd/config.toml.bk
  when: containerd_config.stat.exists

- name: Make sure a containerd service unit is running
  ansible.builtin.systemd:
    state: restarted
    name: containerd

- name: Reset Kubernetes component
  become_user: root
  shell: "kubeadm reset --force --cri-socket=unix:///run/{{ kubeadm.container_runtime }}/{{ kubeadm.container_runtime }}.sock"
  when: ansible_hostname == 'controlplane'
  register: reset_cluster

- name: Get controlplane public IP
  shell: curl ifconfig.me
  when: ansible_hostname == 'controlplane'
  register: getCPPubIP

- name: Run init kubeadm
  become_user: root
  shell: |
    kubeadm init --service-cidr {{ kubeadm.service_cidr }} \
                 --pod-network-cidr {{ kubeadm.pod_network_cidr }} \
                 --token {{ kubeadm.token }} \
                 --control-plane-endpoint {{ getCPPubIP.stdout }} \
                 --cri-socket=unix:///run/{{ kubeadm.container_runtime }}/{{ kubeadm.container_runtime }}.sock
  args:
    executable: /bin/bash
  when: ansible_hostname == 'controlplane'
  register: init_cluster

- name: Create a log directory if it does not exist
  ansible.builtin.file:
    path: files
    state: directory
    mode: '0755'

- name: Create a log directory if it does not exist
  ansible.builtin.file:
    path: files/logs
    state: directory
    mode: '0755'

- name: Touch the log file
  ansible.builtin.file:
    path: files/logs/init_cluster.log
    state: touch
    mode: '0755'
  when: ansible_hostname == 'controlplane'

- name: Log the init results
  shell: "echo $INIT_CLUSTER > files/logs/init_cluster.log"
  environment:
    INIT_CLUSTER: "{{ init_cluster }}"
  when: ansible_hostname == 'controlplane'

- name: Create kubernetes config directory
  file:
    path: "/home/{{ vm.user }}/.kube/"
    state: directory
  become_user: "{{ansible_user}}"
  when: ansible_hostname == 'controlplane'

- name: Copy admin.conf to Home directory
  copy:
    src: "/etc/kubernetes/admin.conf"
    dest: "/home/{{ vm.user }}/.kube/config"
    owner: "{{ vm.user }}"
    group: "{{ vm.user }}"
    mode: 0755
    remote_src: true
  when: 
    - init_cluster is succeeded
    - ansible_hostname == 'controlplane'

- name: Print join command
  shell: | 
    echo '#!/bin/bash\n\n' > files/join_command.sh
    echo ' ' >> files/join_command.sh
    kubeadm token create --print-join-command >> files/join_command.sh
  when: ansible_hostname == 'controlplane'

- name: Fetch join command file
  ansible.builtin.fetch:
    src: files/join_command.sh
    dest: files/
    flat: yes
  when: ansible_hostname == 'controlplane'

- name: Copy join command file
  copy:
    src: files/join_command.sh
    dest: files
    owner: "{{ vm.user }}"
    group: "{{ vm.user }}"
    mode: a+x
  when: 
    - ansible_hostname == 'worker'

- name: Reset Kubernetes worker component
  become_user: root
  shell: "kubeadm reset --force --cri-socket=unix:///run/{{ kubeadm.container_runtime }}/{{ kubeadm.container_runtime }}.sock"
  when: ansible_hostname == 'worker'
  register: reset_cluster

- name: Run join cluster command for worker
  shell: files/join_command.sh
  args:
    executable: /bin/bash
  become_user: root
  when: ansible_hostname == 'worker'
  register: join_cluster

- name: Touch the log file
  ansible.builtin.file:
    path: files/logs/join_cluster.log
    state: touch
    mode: '0755'
  when: ansible_hostname == 'worker'

- name: Log the join results
  shell: "echo $JOIN_CLUSTER > files/logs/join_cluster.log"
  environment:
    JOIN_CLUSTER: "{{ join_cluster }}"
  when: ansible_hostname == 'worker'