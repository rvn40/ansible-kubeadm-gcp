---

- name: Get ip
  ansible.builtin.uri:
    url: 'https://ifconfig.me/ip'
    method: GET
    return_content: true
  register: getIP
  when: ansible_hostname == 'controlplane'

- name: Checking file config containerd exist
  stat: path=/etc/containerd/config.toml
  register: containerd_config

- name: Move config.toml
  command: mv /etc/containerd/config.toml /etc/containerd/config.toml.bk
  when: containerd_config.stat.exists

- name: Make sure a containerd service unit is running
  ansible.builtin.systemd:
    state: restarted
    name: containerd

- name: Reset Kubernetes component
  shell: "kubeadm reset --force --cri-socket=/var/run/{{ kubeadm.container_runtime }}/{{ kubeadm.container_runtime }}.sock"
  when: ansible_hostname == 'controlplane'
  register: reset_cluster

- name: Run init kubeadm
  shell: |
    kubeadm init --service-cidr {{ kubeadm.service_cidr }} \
                 --pod-network-cidr {{ kubeadm.pod_network_cidr }} \
                 --token {{ kubeadm.token }} \
                 --apiserver-advertise-address {{ getIP.content }} \
                 --cri-socket=unix:///run/{{ kubeadm.container_runtime }}/{{ kubeadm.container_runtime }}.sock
  args:
    executable: /bin/bash
  when: ansible_hostname == 'controlplane'
  register: init_cluster

- name: Log the init results
  shell:  "{{ init_cluster }} > files/init_cluster.log"

- name: Copy kubernetes config directory
  file:
    path: "/home/rivan/.kube/"
    state: directory
  become_user: "{{ansible_user}}"

- name: Copy admin.conf to Home directory
  copy:
    src: "/etc/kubernetes/admin.conf"
    dest: "/home/rivan/.kube/config"
    owner: "rivan"
    group: "rivan"
    mode: 0755
  when: init_cluster is succeeded